/* Copyright ABCya.com, LLC 
 Fri, 18 Aug 2017 13:55:38 GMT */
function getUrlParams() {
    var a = {};
    return window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (b, c, d) {
        a[c] = d
    }), a
}

function getRandom(a, b) {
    return Math.floor(Math.random() * (1 + b - a) + a)
}

function numberWithCommas(a) {
    return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
}

function str_pad_left(a, b, c) {
    return (new Array(c + 1).join(b) + a).slice(-c)
}

function shuffleArray(a) {
    for (var b, c, d = a, e = 0; e < a.length; e++) b = d[e], c = e + Math.floor(Math.random() * (a.length - e)), d[e] = d[c], d[c] = b;
    return d
}

function hexToRgb(a) {
    var b = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);
    return b ? {
        red: parseInt(b[1], 16),
        green: parseInt(b[2], 16),
        blue: parseInt(b[3], 16)
    } : null
}

function pxValue(a) {
    return a + "px"
}

function getHighestNum(a) {
    for (var b = 0, c = 0; c < a.length; c++) a[c] > b && (b = a[c]);
    return b
}

function getLowestNum(a) {
    for (var b = a[0], c = 0; c < a.length; c++) a[c] < b && (b = a[c]);
    return b
}

function getAverageNum(a) {
    for (var b = 0, c = 0; c < a.length; c++) b += a[c];
    return b / a.length
}

function lowestToHighest(a) {
    for (var b = []; b.length < a.length;) {
        for (var c = 0, d = a[b.length]; c < a.length && b[c] < d;) c++;
        b.splice(c, 0, d)
    }
    return b
}

function createCenteredText(a, b, c, d, e) {
    for (var f = new createjs.Container, g = a.split("\n"), h = e ? e : 2, i = 0; i < g.length; i++) {
        var j = new createjs.Text(g[i], b + "pt " + c, d);
        j.textBaseline = "middle", j.x = j.getMeasuredWidth() / 2 * -1, i > 0 && (j.y = g[i - 1].y + g[i - 1].getMeasuredHeight() + h), f.addChild(j), g[i] = j
    }
    return f
}

function createOutlineTxt(a, b, c, d, e) {
    var f = new createjs.Container,
        g = new createjs.Text(a, c + "pt " + b, d);
    g.textBaseline = "middle", g.outline = 5;
    var h = new createjs.Text(a, c + "pt " + b, e);
    return h.textBaseline = "middle", f.addChild(g), f.addChild(h), f
}

function createShadowTxt(a, b, c, d, e) {
    var f = new createjs.Container,
        g = new createjs.Text(a, c + "pt " + b, "#000");
    g.textBaseline = "middle", g.x = e, g.y = e, g.alpha = .5;
    var h = new createjs.Text(a, c + "pt " + b, d);
    return h.textBaseline = "middle", f.addChild(g), f.addChild(h), f
}

function resizeDimensions(a, b, c, d) {
    var e = a,
        f = b,
        g = 1;
    return e > f && e > c ? (g = c / e, f *= g, e = c, f > d && (g = d / f, e *= g, f = d)) : f > d && (g = d / f, e *= g, f = d), {
        width: e,
        height: f,
        scale: g
    }
}

function getRotatedPoint(a, b) {
    var c = .0174532925,
        d = b * Math.cos(a * c),
        e = b * Math.sin(a * c),
        f = new createjs.Point(d, e);
    return f
}

function removeTweenedItem(a) {
    a.parent && a.parent.removeChild(a)
}

function calculateDistance(a, b, c, d) {
    var e = a - c,
        f = b - d;
    return Math.sqrt(Math.pow(e, 2) + Math.pow(f, 2))
}

function createCenteredSprite(a, b) {
    var c = new createjs.Sprite(a, b);
    return c.regX = c.getBounds().width / 2, c.regY = c.getBounds().height / 2, c
}

function dashedLineTo(a, b, c, d, e, f) {
    var g = calculateDistance(b, c, d, e),
        h = d - b,
        i = e - c,
        j = Math.floor(g / f),
        k = h / j,
        l = i / j;
    a.graphics.moveTo(b, c);
    for (var m = 0; m++ < j;) b += k, c += l, a.graphics[m % 2 == 0 ? "moveTo" : "lineTo"](b, c);
    a.graphics[m % 2 == 0 ? "moveTo" : "lineTo"](d, e)
}

function itemSplice(a, b) {
    var c = a.length;
    if (c) {
        for (; b < c;) a[b++] = a[b];
        --a.length
    }
}! function (a) {
    function b() {
        this.preload = new createjs.LoadQueue, this.preload.installPlugin(createjs.Sound), this.preload.setMaxConnections(4)
    }
    a.abcya = a.abcya || {}, b.prototype.preload = null, b.prototype.onDownloadCompleted = null, b.prototype.preloadUpdater = null, b.prototype.dialogSheet = null, b.prototype.spriteSheet = null, b.prototype.startPreload = function () {
        this.preload.addEventListener("complete", this.handlePreloadComplete.bind(this)), this.preload.addEventListener("progress", this.handlePreloadProgress.bind(this));
        var a = abcya.GameConstants.COMMON_IMAGE_ASSETS_PATH,
            b = [{
                id: "preload-assets",
                src: "preload-assets.json"
            }, {
                id: "mainBg",
                src: game.orientation + "BlankBackground_4x3.png"
            }, {
                id: "mainBgWide",
                src: game.orientation + "BlankBackground_16x9.png"
            }];
        this.preload.loadManifest(b, !1, a), this.preload.load()
    }, b.prototype.handlePreloadProgress = function () {}, b.prototype.handlePreloadComplete = function () {
        this.preload.removeAllEventListeners(), this.onDownloadCompleted()
    }, b.prototype.startDownload = function () {
        this.preload.addEventListener("complete", this.handleDownloadComplete.bind(this)), this.preload.addEventListener("progress", this.handleDownloadProgress.bind(this));
        var a = abcya.GameConstants.COMMON_IMAGE_ASSETS_PATH,
            b = abcya.GameConfig.COMMON_IMAGE_MANIFEST;
        this.preload.loadManifest(b, !1, a), a = abcya.GameConstants.COMMON_AUDIO_ASSETS_PATH, b = abcya.GameConfig.COMMON_SOUND_MANIFEST, createjs.Sound.alternateExtensions = ["mp3"], this.preload.loadManifest(b, !1, a), a = abcya.GameConfig.GROUP_IMAGE_ASSETS_PATH, b = abcya.GameConfig.GROUP_IMAGE_MANIFEST, this.preload.loadManifest(b, !1, a), a = abcya.GameConfig.GROUP_AUDIO_ASSETS_PATH, b = abcya.GameConfig.GROUP_SOUND_MANIFEST, createjs.Sound.alternateExtensions = ["mp3"], this.preload.loadManifest(b, !1, a), a = abcya.GameConfig.GAME_IMAGE_ASSETS_PATH, b = abcya.GameConfig.LOCAL_IMAGE_MANIFEST, this.preload.loadManifest(b, !1, a), a = abcya.GameConfig.GAME_AUDIO_ASSETS_PATH, b = abcya.GameConfig.LOCAL_SOUND_MANIFEST, createjs.Sound.alternateExtensions = ["mp3"], this.preload.loadManifest(b, !1, a), b = [];
        for (var c = "abcdefghijklmnopqrstuvwxyz"; c.length > 0;) {
            var d = "sound" + c.charAt(0),
                e = c.charAt(0).toUpperCase() + ".ogg",
                f = {
                    id: d,
                    src: e,
                    data: 1
                };
            b.push(f), c = c.substr(1)
        }
        createjs.Sound.alternateExtensions = ["mp3"], this.preload.loadManifest(b, !1, a), b = [];
        for (var g = 0; g < 10; g++) {
            var h = "sound" + g.toString(),
                i = g.toString() + ".ogg",
                j = {
                    id: h,
                    src: i,
                    data: 1
                };
            b.push(j)
        }
        createjs.Sound.alternateExtensions = ["mp3"], this.preload.loadManifest(b, !1, a), a = abcya.GameConfig.DATA_ASSETS_PATH, b = [{
            id: "trace-data",
            src: "trace-data.json"
        }], this.preload.loadManifest(b, !1, a), this.preload.load()
    }, b.prototype.handleDownloadProgress = function (a) {
        this.preloadUpdater && this.preloadUpdater.setProgress(a.progress)
    }, b.prototype.handleDownloadComplete = function () {
        this.preload.removeAllEventListeners(), this.spriteSheet = new createjs.SpriteSheet(this.getAsset("gameItemData")), this.onDownloadCompleted(), this.onDownloadCompleted = null, this.preloadUpdater = null
    }, b.prototype.setDownloadCompleted = function (a) {
        this.onDownloadCompleted = a
    }, b.prototype.setPreloadViewUpdate = function (a) {
        this.preloadUpdater = a
    }, b.prototype.getAsset = function (a) {
        return this.preload.getResult(a)
    }, a.abcya.AssetsManager = b
}(window),
function (a) {
    function b(a) {
        this.gameRef = a, this.gameRef.assets = new abcya.AssetsManager, this.gameRef.assets.setDownloadCompleted(this.handlePreloadComplete.bind(this)), this.gameRef.assets.startPreload(), createjs.Touch.isSupported() && createjs.Touch.enable(game.stage, !0), createjs.Ticker.timingMode = createjs.Ticker.RAF, createjs.Ticker.maxDelta = 50, createjs.Ticker.setFPS(abcya.GameConfig.FPS)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = {};
    c.gameRef = null, c.preloader = null, c.handlePreloadComplete = function (a) {
        this.gameRef.updateGameSize(), this.preloader = new abcya.PreloadScreen;
        game.screen_width > game.screen_height ? 1024 : 768;
        this.preloader.on("PRELOAD_CLICK", this.startGame, this), this.gameRef.stage.addChild(this.preloader), this.gameRef.stage.update(), this.gameRef.assets.setDownloadCompleted(this.gameAssetsReady.bind(this)), this.gameRef.assets.setPreloadViewUpdate(this.preloader), this.gameRef.assets.startDownload(), document.getElementById("gameWrapper").style.visibility = "visible"
    }, c.gameAssetsReady = function () {
        this.preloader.addClick(), this.gameRef.stage.update()
    }, c.startGame = function (a) {
        this.gameRef.stage.removeChild(this.preloader), this.preloader = null, this.gameRef.sceneManager = new abcya.SceneManager
    }, c.layoutScreens = function () {
        if (this.preloader) {
            game.screen_width > game.screen_height ? 1024 : 768;
            this.preloader.x = 0, this.preloader.layoutRatio()
        } else this.sceneManager && this.gameRef.sceneManager.layoutScreens()
    }, a.abcya.EaselBoot = b
}(window),
function () {
    window.abcya = window.abcya || {};
    var a = {
            GS_PRELOAD: 0,
            GS_RUNSCENE: 1,
            GS_INTRO: 3,
            GS_GAME: 10,
            GS_END: 15
        },
        b = {
            GE_GO_CLICK: "handle_go_click",
            GE_SHOW_INTRO: "show_intro",
            GE_SHOW_GAME: "show_game",
            GE_SHOW_END: "show_end"
        },
        c = {
            RUN_MODE: "Production",
            FPS: 61,
            DO_ORIENTATION_BLOCK: !0,
            EXIT_URL: "../../../",
            FORCE_NORMAL_RATIO: !0,
            GAME_ORIENTATION: "Landscape",
            GAME_TYPE: "Easel",
            USE_RATIOS: !0,
            GAME_FONTS: ["printbold", "vagrounded_btregular", "grandstander"],
            USES_STORAGE: !1,
            STORAGE_PREFIX: "starter_game",
            STORAGE_TYPE: "local",
            GAME_NAME: "interactive_100_number_chart",
            GROUP_IMAGE_ASSETS_PATH: "./assets/images/",
            GROUP_AUDIO_ASSETS_PATH: "./assets/audio/",
            GAME_IMAGE_ASSETS_PATH: "./assets/images/",
            GAME_AUDIO_ASSETS_PATH: "./assets/audio/",
            DATA_ASSETS_PATH: "./assets/data/",
            COMMON_IMAGE_MANIFEST: [],
            COMMON_SOUND_MANIFEST: [],
            GROUP_IMAGE_MANIFEST: [],
            GROUP_SOUND_MANIFEST: [],
            LOCAL_IMAGE_MANIFEST: [{
                id: "gameItemData",
                src: "game-items.json"
            }, {
                id: "gameItemSheet",
                src: "game-items.png"
            }, {
                id: "bg-intro",
                src: "bg-intro.png"
            }, {
                id: "bg-classical",
                src: "bg-classical.png"
            }, {
                id: "bg-island",
                src: "bg-island.png"
            }, {
                id: "bg-pop",
                src: "bg-pop.png"
            }, {
                id: "bg-rock",
                src: "bg-rock.png"
            }, {
                id: "rock-bg-items",
                src: "rock-bg-items.png"
            }, {
                id: "pop-bg-items",
                src: "pop-bg-items.png"
            }, {
                id: "classical-bg-items",
                src: "classical-bg-items.png"
            }, {
                id: "island-bg-items",
                src: "island-bg-items.png"
            }, {
                id: "trace-parts-classical",
                src: "trace-parts-classical.json"
            }, {
                id: "trace-parts-classical-sheet-0",
                src: "trace-parts-classical_0.png"
            }, {
                id: "trace-parts-classical-sheet-1",
                src: "trace-parts-classical_1.png"
            }, {
                id: "trace-parts-classical-sheet-2",
                src: "trace-parts-classical_2.png"
            }, {
                id: "trace-parts-classical-sheet-3",
                src: "trace-parts-classical_3.png"
            }, {
                id: "trace-parts-island",
                src: "trace-parts-island.json"
            }, {
                id: "trace-parts-island-sheet-0",
                src: "trace-parts-island_0.png"
            }, {
                id: "trace-parts-island-sheet-1",
                src: "trace-parts-island_1.png"
            }, {
                id: "trace-parts-island-sheet-2",
                src: "trace-parts-island_2.png"
            }, {
                id: "trace-parts-island-sheet-3",
                src: "trace-parts-island_3.png"
            }, {
                id: "trace-parts-pop",
                src: "trace-parts-pop.json"
            }, {
                id: "trace-parts-pop-sheet-0",
                src: "trace-parts-pop_0.png"
            }, {
                id: "trace-parts-pop-sheet-1",
                src: "trace-parts-pop_1.png"
            }, {
                id: "trace-parts-pop-sheet-2",
                src: "trace-parts-pop_2.png"
            }, {
                id: "trace-parts-pop-sheet-3",
                src: "trace-parts-pop_3.png"
            }, {
                id: "trace-parts-rock",
                src: "trace-parts-rock.json"
            }, {
                id: "trace-parts-rock-sheet-0",
                src: "trace-parts-rock_0.png"
            }, {
                id: "trace-parts-rock-sheet-1",
                src: "trace-parts-rock_1.png"
            }, {
                id: "trace-parts-rock-sheet-2",
                src: "trace-parts-rock_2.png"
            }, {
                id: "trace-parts-rock-sheet-3",
                src: "trace-parts-rock_3.png"
            }],
            LOCAL_SOUND_MANIFEST: [{
                id: "clickSound",
                src: "click.ogg",
                data: 3
            }, {
                id: "trace-inst-sound",
                src: "trace-inst-sound.ogg",
                data: 1
            }, {
                id: "intro-theme",
                src: "intro-theme.ogg",
                data: 1
            }, {
                id: "title-sound",
                src: "title-sound.ogg",
                data: 1
            }, {
                id: "new-title",
                src: "new-title.ogg",
                data: 1
            }, {
                id: "rock-select",
                src: "rock-select.ogg",
                data: 1
            }, {
                id: "pop-select",
                src: "pop-select.ogg",
                data: 1
            }, {
                id: "classical-select",
                src: "classical-select.ogg",
                data: 1
            }, {
                id: "island-select",
                src: "island-select.ogg",
                data: 1
            }, {
                id: "uppercase-select",
                src: "uppercase-select.ogg",
                data: 1
            }, {
                id: "lowercase-select",
                src: "lowercase-select.ogg",
                data: 1
            }, {
                id: "numbers-select",
                src: "numbers-select.ogg",
                data: 1
            }, {
                id: "game-select-inst",
                src: "game-select-inst.ogg",
                data: 1
            }, {
                id: "inst-1",
                src: "inst-1.ogg",
                data: 1
            }, {
                id: "inst-2",
                src: "inst-2.ogg",
                data: 1
            }, {
                id: "inst-3",
                src: "inst-3.ogg",
                data: 1
            }, {
                id: "you-did-it",
                src: "you-did-it.ogg",
                data: 1
            }],
            TEXT_COLOR_1: "#82B531",
            TEXT_COLOR_2: "#0D8C5B"
        };
    window.abcya.GameStates = a, window.abcya.GameStateEvents = b, window.abcya.GameConfig = c
}(),
function (a) {
    function b() {
        var b = a.top.abcya.platformData,
            c = null,
            d = null,
            e = null,
            f = null,
            g = 1,
            h = 1,
            i = null,
            j = document.getElementById("contentWrapper"),
            k = document.getElementById("gameWrapper");
        f = b.orientation === abcya.GameConstants.PORTRAIT ? {
            normal: {
                width: abcya.GameConstants.ORIENTATION_DIMS[1],
                height: abcya.GameConstants.ORIENTATION_DIMS[0]
            },
            widescreen: {
                width: abcya.GameConstants.ORIENTATION_DIMS[2],
                height: abcya.GameConstants.ORIENTATION_DIMS[0]
            }
        } : {
            normal: {
                width: abcya.GameConstants.ORIENTATION_DIMS[0],
                height: abcya.GameConstants.ORIENTATION_DIMS[1]
            },
            widescreen: {
                width: abcya.GameConstants.ORIENTATION_DIMS[0],
                height: abcya.GameConstants.ORIENTATION_DIMS[2]
            }
        };
        var l = function () {
                var h = a.top.innerWidth,
                    i = a.top.innerHeight,
                    j = Math.min(h, i),
                    k = Math.min(f.normal.width, f.normal.height);
                if (g = k / j, b.isMobile && !abcya.GameConfig.USE_RATIOS) c = h * g, d = i * g;
                else if (b.force43) e = !1, c = f.normal.width, d = f.normal.height;
                else {
                    var l = Math.max(h, i),
                        m = Math.min(h, i),
                        n = l / m;
                    n < 1.4 ? (e = !1, c = f.normal.width, d = f.normal.height) : (e = !0, c = f.widescreen.width, d = f.widescreen.height)
                }
                if ("portrait" == b.orientation.toLowerCase() || "landscape" == b.orientation.toLowerCase()) {
                    var o = c > d && "portrait" == b.orientation.toLowerCase() || d > c && "landscape" == b.orientation.toLowerCase();
                    if (o) {
                        var p = c,
                            q = d;
                        c = q, d = p
                    }
                }
            },
            m = function () {
                switch (l(), r.screen_width = c, r.screen_height = d, abcya.GameConfig.GAME_TYPE) {
                    case "Phaser":
                        r && (r.scale.setGameSize(c, d), r.camera.setSize(c, d), r.renderer.resize(c, d), r.state.current && r.state.states[r.state.current].resize());
                        break;
                    case "Easel":
                        r.canvas.width = c, r.canvas.height = d;
                        var e = c,
                            f = d,
                            g = 0,
                            i = 0;
                        a.top !== a.parent ? (g = a.parent.innerWidth, i = a.parent.innerHeight) : (g = a.innerWidth, i = a.innerHeight);
                        var j = e / f,
                            k = g,
                            m = i,
                            n = g / i,
                            o = 0,
                            p = 0;
                        n > j ? (k = m * j, h = k / e) : (m = k / j, h = m / f), b.maxViewScale > 0 && h > b.maxViewScale ? (h = 1, o = (g - e) / 2, p = (i - f) / 2) : (p = (i - m) / 2, o = (g - k) / 2), r.curCSSLeft = o, r.curCSSTop = p, r.curCSSScale = h, gameWrapper.style.left = pxValue(parseInt(o)), gameWrapper.style.top = pxValue(parseInt(p)), r.canvas.setAttribute("style", b.tranformTypePrefix + "transform:scale(" + h + ")"), r.sceneManager && r.sceneManager.layoutScreens && r.sceneManager.layoutScreens(), r.bootClass && r.bootClass.layoutScreens && r.bootClass.layoutScreens();
                        break;
                    case "Custom":
                }
            },
            n = function (a) {
                r && ("pagehide" == a.type || "blur" == a.type || 1 == document.hidden || 1 == document.webkitHidden ? r.hasFocus = !1 : r.hasFocus = !0, r.sceneManager && r.sceneManager.gameFocusChange && r.sceneManager.gameFocusChange())
            },
            o = function () {
                i && clearTimeout(i), i = setTimeout(m, 320)
            },
            p = function (a) {
                r.hasFocus = a.detail.hasFocus
            },
            q = function () {
                a.top.addEventListener("view_fullscreen_change", o, !1), a.top.addEventListener("view_focus_change", p, !1), a.addEventListener("resize", m), "Easel" == abcya.GameConfig.GAME_TYPE && (r.bootClass = new abcya.EaselBoot(r)), document.addEventListener("visibilitychange", n, !1), document.addEventListener("webkitvisibilitychange", n, !1), document.addEventListener("pagehide", n, !1), document.addEventListener("pageshow", n, !1)
            };
        l();
        var r = null;
        switch (abcya.GameConfig.GAME_TYPE) {
            case "Phaser":
                j.style.width = "100%", j.style.height = "100%", k.style.width = "100%", k.style.height = "100%", r = this.createPhaserGame(c, d, q);
                break;
            case "Easel":
                r = this.createEaselGame(c, d, q);
                break;
            case "Custom":
        }
        if (null != r) return r.updateGameSize = m, r.screen_width = c, r.screen_height = d, r.isWidescreen = e, r.orientation = abcya.GameConfig.GAME_ORIENTATION, r.platformData = b, r.hasFocus = !0, r
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = {};
    c.createPhaserGame = function (a, b, c) {
        var d = {
                width: a,
                height: b,
                renderer: Phaser.CANVAS,
                parent: "gameWrapper",
                transparent: !1,
                scaleMode: Phaser.ScaleManager.SHOW_ALL,
                advancedTiming: !0
            },
            e = new Phaser.Game(d);
        return e.state.add("boot", abcya.Boot), setTimeout(e.state.start("boot"), 500), e.initGame = c, e
    }, c.createEaselGame = function (a, b, c) {
        var d = document.getElementById("gameCanvas"),
            e = {},
            f = new createjs.Stage(d);
        return f.width = a, f.height = b, e.stage = f, e.canvas = d, e.initGame = c, e
    }, a.abcya.GameMain = b
}(window),
function (a) {
    function b() {
        this.currentScene = null, this.currentStateFunction = null, this.bgImage = null, this.bg = null, this.fpsLabel = null, this.music = null, this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = {};
    c.initialize = function () {
        game.score = 0, game.bestScore = 0, abcya.GameConfig.USES_STORAGE;
        var a = game.isWidescreen ? "mainBgWide" : "mainBg";
        this.gameBg = new createjs.Bitmap(game.assets.getAsset(a)), game.stage.addChild(this.gameBg);
        var b = new abcya.GameBackground;
        game.stage.addChild(b), abcya.GameGlobals.GAME_BG = b, createjs.Ticker.on("tick", this.gameLoop, this), this.changeState(abcya.GameStates.GS_INTRO), createjs.Tween.get(this).wait(200).call(this.layoutScreens, [], this)
    }, c.changeState = function (a) {
        switch (a) {
            case abcya.GameStates.GS_RUNSCENE:
                this.currentStateFunction = this.gameStateRunScene;
                break;
            case abcya.GameStates.GS_INTRO:
                this.currentStateFunction = this.gameStateShowIntro;
                break;
            case abcya.GameStates.GS_GAME:
                this.currentStateFunction = this.gameStateShowGame;
                break;
            case abcya.GameStates.GS_END:
                this.currentStateFunction = this.gameStateShowEnd
        }
    }, c.gameStateRunScene = function (a) {
        game.hasFocus && this.currentScene.tick && this.currentScene.tick(a)
    }, c.gameStateShowIntro = function (a) {
        var b = new abcya.IntroScreen;
        b.on(abcya.GameStateEvents.GE_SHOW_GAME, this.onStateEvent, this, !1, {
            state: abcya.GameStates.GS_GAME
        }), b.addEventListener("TOGGLE_MUSIC", this.controlMusic.bind(this)), game.stage.addChild(b), this.currentScene = b, this.changeState(abcya.GameStates.GS_RUNSCENE), b.beginIntro(), this.playMusic()
    }, c.gameStateShowGame = function (a) {
        var b = new abcya.GameScreen;
        b.on(abcya.GameStateEvents.GE_SHOW_INTRO, this.onStateEvent, this, !1, {
            state: abcya.GameStates.GS_INTRO
        }), b.on(abcya.GameStateEvents.GE_SHOW_END, this.onStateEvent, this, !1, {
            state: abcya.GameStates.GS_END
        }), game.stage.addChild(b), this.currentScene = b, this.changeState(abcya.GameStates.GS_RUNSCENE), game.stage.addChild(game.fpsLabel)
    }, c.gameStateShowEnd = function (a) {
        var b = new abcya.BonusScreen;
        b.on(abcya.GameStateEvents.GE_SHOW_INTRO, this.onStateEvent, this, !1, {
            state: abcya.GameStates.GS_INTRO
        }), b.on(abcya.GameStateEvents.GE_SHOW_GAME, this.onStateEvent, this, !1, {
            state: abcya.GameStates.GS_GAME
        }), game.stage.addChild(b), this.currentScene = b, this.changeState(abcya.GameStates.GS_RUNSCENE), game.stage.addChild(game.fpsLabel)
    }, c.onStateEvent = function (a, b) {
        this.changeState(b.state)
    }, c.gameLoop = function (a) {
        null != this.currentStateFunction && this.currentStateFunction(a), game.stage.update(a)
    }, c.controlMusic = function (a) {
        1 == a._musicOn ? null == this.music && this.playMusic() : (game.themePlaying = !1, null != this.music && (this.music.stop(), this.music = null))
    }, c.playMusic = function () {
        this.music = createjs.Sound.play("music", {
            loop: -1
        }), game.themePlaying = !0
    }, c.layoutScreens = function () {
        if (this.currentScene) {
            var a = game.isWidescreen ? "mainBgWide" : "mainBg";
            this.gameBg.image = game.assets.getAsset(a), this.currentScene.layoutRatio, this.currentScene.layoutRatio()
        }
    }, c.debugStuff = function (a) {
        this.fpsLabel.text = a
    }, a.abcya.SceneManager = b
}(window),
function (a) {
    a.abcya = a.abcya || {}
}(window),
function () {
    function a(a) {
        this.gamePrefix = a, this.initialize()
    }
    window.abcya = window.abcya || {}, a.prototype = {}, this.gamePrefix = null, a.prototype.initialize = function () {}, a.prototype.setValue = function (a, b) {
        localStorage.setItem(this.gamePrefix + a, b)
    }, a.prototype.getValue = function (a) {
        var b = localStorage.getItem(this.gamePrefix + a);
        return b
    }, window.abcya.GameStorage = a
}(),
function (a) {
    function b(a) {
        this.Container_constructor(), this.initialize(a)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.bonusBgCircle = null, c.bonusAreaSize = null, c.placeHolders = null, c.holderSize = null, c.initialize = function (a) {
        this.bonusAreaSize = 620;
        var b = "#fff",
            c = "#fff";
        switch (abcya.GameGlobals.GAME_THEME) {
            case "rock":
                b = "#77686C", c = "#AA9FA3";
                break;
            case "classical":
                b = "#0075A8", c = "#00BDD6";
                break;
            case "pop":
                b = "#8A00D3", c = "#B924FF";
                break;
            case "island":
                b = "#00A556", c = "59D10B"
        }
        for (this.bonusBgCircle = new createjs.Shape, this.bonusBgCircle.graphics.beginFill(b).setStrokeStyle(4).drawCircle(0, 0, this.bonusAreaSize / 2), this.bonusBgCircle.x = this.bonusAreaSize / 2, this.bonusBgCircle.y = this.bonusAreaSize / 2, this.addChild(this.bonusBgCircle), this.holderSize = 60, this.placeHolders = []; this.placeHolders.length < a.length;) {
            var d = new abcya.BonusPlaceHolder(a[this.placeHolders.length], this.holderSize);
            this.placeHolders.push(d)
        }
        var e, f, g = 10 == this.placeHolders.length ? 20 : 12,
            h = 10 == this.placeHolders.length ? 5 : 6,
            i = h * (this.holderSize + g) - g,
            j = this.bonusAreaSize / 2 - i / 2;
        10 == this.placeHolders.length ? (e = [0, 5], f = [j, j + this.holderSize / 2]) : (e = [0, 6, 13, 20], f = [j - this.holderSize / 2, j - this.holderSize, j - this.holderSize / 2, j]);
        for (var k = this.bonusAreaSize / 2 - (this.holderSize + g) * e.length / 2, l = 0, m = 0; l < this.placeHolders.length;) {
            var n = this.placeHolders[l];
            m < e.length - 1 && l >= e[m + 1] && m++;
            var o = l - e[m];
            n.x = f[m] + (this.holderSize + g) * o + this.holderSize / 2, n.y = k + (this.holderSize + g) * m + this.holderSize / 2, this.addChild(n), l++
        }
    }, c.startPulse = function () {
        createjs.Tween.get(this.bonusBgCircle, {
            loop: -1
        }).to({
            scaleX: 1.03,
            scaleY: 1.03
        }, 200, createjs.Ease.quadOut).to({
            scaleX: 1,
            scaleY: 1
        }, 200, createjs.Ease.backOut)
    }, a.abcya.BonusGameArea = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a, b) {
        this.Container_constructor(), this.initialize(a, b)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.pieceDisplay = null, c.pieceId = null, c.initialize = function (a, b) {
        this.pieceId = b, this.pieceDisplay = a, this.pieceDisplay.scaleX = this.pieceDisplay.scaleY = .1, this.addChild(this.pieceDisplay);
        var c = new createjs.Shape;
        c.graphics.beginFill("#fff"), this.pieceDisplay.getBounds().width * this.pieceDisplay.scaleX >= 50 ? c.graphics.drawRect(-5, -5, this.pieceDisplay.getBounds().width * this.pieceDisplay.scaleX + 5, this.pieceDisplay.getBounds().height * this.pieceDisplay.scaleY + 5) : c.graphics.drawRect(-25, -5, 55, this.pieceDisplay.getBounds().height * this.pieceDisplay.scaleY + 5), this.regX = this.pieceDisplay.getBounds().width * this.pieceDisplay.scaleX / 2, this.regY = this.pieceDisplay.getBounds().height * this.pieceDisplay.scaleY / 2, this.hitArea = c
    }, a.abcya.BonusGamePiece = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a, b) {
        this.Container_constructor(), this.initialize(a, b)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.circleShape = null, c.targetVal = null, c.isFilled = null, c.circleWidth = null, c.initialize = function (a, b) {
        this.isFilled = !1, this.targetVal = a, this.circleWidth = b;
        var c = "#fff",
            d = "#fff";
        switch (abcya.GameGlobals.GAME_THEME) {
            case "rock":
                c = "#51444D", d = "#FF8B17";
                break;
            case "classical":
                c = "#06547F", d = "#F4AE00";
                break;
            case "pop":
                c = "#6605A5", d = "#FF3EBA";
                break;
            case "island":
                c = "#008454", d = "#EFE522"
        }
        this.circleShape = new createjs.Shape, this.circleShape.graphics.beginFill(c).setStrokeStyle(2).beginStroke(d).drawCircle(0, 0, this.circleWidth / 2), this.addChild(this.circleShape)
    }, c.fillWithClip = function (a) {
        this.isFilled || (this.addChild(a), a.x = 0, a.y = 0, this.isFilled = !0)
    }, a.abcya.BonusPlaceHolder = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.bgImage = null, c.items = null, c.bgWidth = null, c.bgHeight = null, c.initialize = function () {
        this.items = []
    }, c.showBg = function (a, b) {
        for (this.bgImage && (this.removeChild(this.bgImage), this.bgImage = null), this.bgImage = new createjs.Bitmap(game.assets.getAsset(a)), this.addChild(this.bgImage), this.bgWidth = this.bgImage.getBounds().width, this.bgHeight = this.bgImage.getBounds().height; this.items.length > 0;) this.removeChild(this.items.shift());
        if (b)
            for (; this.items.length < b.length;) {
                var c = createCenteredSprite(game.assets.spriteSheet, b[this.items.length].itemName);
                c.x = b[this.items.length].itemXPos, c.y = b[this.items.length].itemYPos, this.addChild(c), this.items.push(c)
            }
    }, c.panBg = function (a, b, c) {
        var d;
        switch (c || (c = createjs.Ease.sineIn), a) {
            case "down":
                d = -(this.bgImage.getBounds().height - game.screen_height - 60);
                break;
            case "up":
                d = this.bgImage.y * -1
        }
        createjs.Tween.get(this.bgImage).to({
            y: this.bgImage.y + d
        }, b, c);
        for (var e = this.items.length, f = 0; f < e; f++) createjs.Tween.get(this.items[f]).to({
            y: this.items[f].y + d
        }, b, c)
    }, a.abcya.GameBackground = createjs.promote(b, "Container")
}(window),
function () {
    window.abcya = window.abcya || {};
    var a = {
        USER_NAME: "user-name",
        GAME_BG: null,
        GAME_THEME: "pop",
        TRACE_GROUP: "lowercase",
        CHAR_FONT: "printbold",
        USER_TRACES: {}
    };
    window.abcya.GameGlobals = a
}(),
function (a) {
    function b(a, b) {
        this.charBase = null, this.lines = null, this.charSheet = null, this.charId = null, this.initialize(a, b)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = {};
    c.initialize = function (a, b) {
        this.charSheet = b, this.charId = a.traceId, this.charBase = new createjs.Sprite(this.charSheet, this.charId + "-base"), this.lines = [];
        for (var c = 0, d = a.parts.length; c < d;) {
            var e = new createjs.Sprite(this.charSheet, this.charId + "-line-" + (c + 1).toString());
            this.lines.push(e), c++
        }
    }, c.getBase = function () {
        return this.charBase
    }, c.getWorkingPath = function (a) {
        for (var b = 0, c = this.lines.length, d = null; b < c && null == d;) b === a && (d = this.lines[b]), b++;
        return d
    }, a.abcya.TraceCharacter = b
}(window),
function (a) {
    function b(a, b, c) {
        this.Container_constructor(), this.initialize(a, b, c)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.paths = null, c.trackAnchors = null, c.trackMarkers = null, c.debugShape = null, c.markerInterval = null, c.initialize = function (a, b, c) {
        this.debugShape = c, this.markerInterval = b, this.totalLineLength = 0, this.paths = a, this.pathDataArr = [];
        for (var d = 0; d < this.paths.length; d++) {
            var e = {};
            if (e.points = this.paths[d], e.startDistance = this.totalLineLength, this.paths[d].length < 8) {
                var f = this.getLineData(this.paths[d], e.startDistance);
                e.segLengths = f.segLengths, e.pathLength = f.lineLength
            } else {
                var g = this.getCurveData(this.paths[d], e.startDistance);
                e.segLengths = g.arcLengths, e.pathLength = g.curveLength
            }
            e.endDistance = e.segLengths[e.segLengths.length - 1], this.totalLineLength = e.endDistance, this.pathDataArr.push(e)
        }
        for (var h = 0; h < this.pathDataArr.length; h++) {
            var i = this.pathDataArr[h];
            i.percentOfTrack = i.pathLength / this.totalLineLength, i.endPercent = i.endDistance / this.totalLineLength, i.startPercent = i.startDistance / this.totalLineLength
        }
        this.trackAnchors = this.getPathAnchors(), this.trackMarkers = this.getPathMarkers(this.markerInterval)
    }, c.getPathAnchors = function () {
        var a = this.getTrackPoint(0),
            b = this.getTrackPoint(.25 * this.totalLineLength),
            c = this.getTrackPoint(.5 * this.totalLineLength),
            d = this.getTrackPoint(.75 * this.totalLineLength),
            e = this.getTrackPoint(this.totalLineLength);
        return [a, b, c, d, e]
    }, c.getPathMarkers = function (a) {
        for (var b = [], c = -a; c < this.totalLineLength;) {
            c += a, c > this.totalLineLength && (c = this.totalLineLength);
            var d = this.getTrackPoint(c);
            b.push(d)
        }
        return b
    }, c.getLineData = function (a, b) {
        for (var c = 0, d = this.getLinePoint(a, 0).cx, e = this.getLinePoint(a, 0).cy, f = .1, g = [], h = 0; h <= 10; h++) {
            var i = this.getLinePoint(a, h * f),
                j = i.cx,
                k = i.cy,
                l = j - d,
                m = k - e,
                n = Math.sqrt(l * l + m * m);
            c += n, g.push(b + c), d = j, e = k
        }
        var o = {
            segLengths: g,
            lineLength: c
        };
        return o
    }, c.getLinePoint = function (a, b) {
        var c = a[2] - a[0],
            d = a[3] - a[1],
            e = a[0] + c * b,
            f = a[1] + d * b;
        return {
            cx: e,
            cy: f
        }
    }, c.getCurveData = function (a, b) {
        for (var c = 0, d = this.getCurvePoint(a, 0).cx, e = this.getCurvePoint(a, 0).cy, f = .1, g = [], h = 0; h <= 10; h++) {
            var i = this.getCurvePoint(a, h * f),
                j = i.cx,
                k = i.cy,
                l = j - d,
                m = k - e,
                n = Math.sqrt(l * l + m * m);
            c += n, g.push(b + c), d = j, e = k
        }
        var o = {
            arcLengths: g,
            curveLength: c
        };
        return o
    }, c.getCurvePoint = function (a, b) {
        var c = {
                x: a[0],
                y: a[1]
            },
            d = {
                x: a[2],
                y: a[3]
            },
            e = {
                x: a[4],
                y: a[5]
            },
            f = {
                x: a[6],
                y: a[7]
            },
            g = c.x * this.b1(b) + d.x * this.b2(b) + e.x * this.b3(b) + f.x * this.b4(b),
            h = c.y * this.b1(b) + d.y * this.b2(b) + e.y * this.b3(b) + f.y * this.b4(b);
        return {
            cx: g,
            cy: h
        }
    }, c.getTrackPoint = function (a) {
        for (var b = this.getTrackPercent(a), c = 0; this.pathDataArr[c].endPercent < b;) c++;
        var d, e = this.pathDataArr[c],
            f = (b - e.startPercent) / e.percentOfTrack;
        return d = e.points.length < 8 ? this.getLinePoint(e.points, f) : this.getCurvePoint(e.points, f)
    }, c.getTrackPercent = function (a) {
        return a / this.totalLineLength
    }, c.getDistanceZone = function (a) {}, c.getStoredDistance = function (a, b) {
        var c = this.pathDataArr[a].segLengths[b];
        return c
    }, c.drawTrack = function () {
        for (var a = (this.getTrackPoint(0), this.getTrackPoint(this.totalLineLength / 2), this.getTrackPoint(this.totalLineLength), 0); a < this.trackAnchors.length;) this.debugShape.graphics.beginFill("#FFF"), this.debugShape.graphics.drawCircle(this.trackAnchors[a].cx, this.trackAnchors[a].cy, 5), this.debugShape.graphics.endFill(), a++;
        for (a = 0; a < this.trackMarkers.length;) this.debugShape.graphics.beginFill("#F00"), this.debugShape.graphics.drawCircle(this.trackMarkers[a].cx, this.trackMarkers[a].cy, 3), this.debugShape.graphics.endFill(), a++
    }, c.drawLines = function (a, b) {
        for (var c = 0; c < this.paths.length; c++) {
            var d = this.paths[c];
            this.debugShape.graphics.setStrokeStyle(2), this.debugShape.graphics.beginStroke("#000"), this.debugShape.graphics.moveTo(d[0], d[1]);
            var e, f, g;
            d.length < 8 ? (e = this.getLinePoint(d, .01), f = this.getLinePoint(d, .5), g = this.getLinePoint(d, 1), this.debugShape.graphics.lineTo(d[2], d[3])) : (e = this.getCurvePoint(d, .01), f = this.getCurvePoint(d, .5), g = this.getCurvePoint(d, 1), this.debugShape.graphics.bezierCurveTo(d[2], d[3], d[4], d[5], d[6], d[7])), this.debugShape.graphics.endStroke(), b && (this.debugShape.graphics.beginFill("#FFF"), this.debugShape.graphics.drawRect(e.cx, e.cy, 10, 10), this.debugShape.graphics.drawCircle(f.cx, f.cy, 10), this.debugShape.graphics.endFill(), this.debugShape.graphics.beginFill("#F00"), this.debugShape.graphics.drawRect(g.cx, g.cy, 10, 10), this.debugShape.graphics.endFill())
        }
    }, c.b1 = function (a) {
        return (1 - a) * (1 - a) * (1 - a)
    }, c.b2 = function (a) {
        return 3 * (1 - a) * (1 - a) * a
    }, c.b3 = function (a) {
        return 3 * (1 - a) * (a * a)
    }, c.b4 = function (a) {
        return a * a * a
    }, a.abcya.TraceTrack = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.traceSheet = null, c.bgCircle = null, c.areaSize = null, c.pressPts = null, c.drawLayer = null, c.traceDebug = null, c.currentStroke = null, c.curTraceCharacter = null, c.curTraceData = null, c.curBase = null, c.curTrack = null, c.curPathIndex = null, c.curPathDisplay = null, c.pathDisplayLayer = null, c.traceReady = null, c.tracePtInterval = null, c.curPathMarker = null, c.lastDrawMarker = null, c.lastMarkerTime = null, c.handPointer = null, c.traces = null, c.traceScores = null, c.userTraceMarkers = null, c.furthestMarkerReached = null, c.guideShowing = null, c.drawSound = null, c.defaultSoundVolume = null, c.traceTime = null, c.playerIsTracing = null, c.handTween = null, c.dotCompleted = null, c.initialize = function () {
        this.traceReady = !1, this.pressPts = [], this.traceSheet = new createjs.SpriteSheet(game.assets.getAsset("trace-parts-" + abcya.GameGlobals.GAME_THEME)), this.areaSize = 620, this.tracePtInterval = 20, this.traces = [], this.traceScores = [], this.userTraceMarkers = [], this.defaultSoundVolume = .15, this.lastDrawMarker = null;
        var a = "#fff",
            b = "#fff";
        switch (abcya.GameGlobals.GAME_THEME) {
            case "rock":
                a = "#77686C", b = "#AA9FA3";
                break;
            case "classical":
                a = "#0075A8", b = "#00BDD6";
                break;
            case "pop":
                a = "#8A00D3", b = "#B924FF";
                break;
            case "island":
                a = "#00A556", b = "59D10B"
        }
        this.bgCircle = new createjs.Shape, this.bgCircle.graphics.beginFill(a).setStrokeStyle(4).drawCircle(this.areaSize / 2, this.areaSize / 2, this.areaSize / 2), this.addChild(this.bgCircle), this.pathDisplayLayer = new createjs.Container, this.addChild(this.pathDisplayLayer), this.traceDebug = new createjs.Shape, this.addChild(this.traceDebug), this.handPointer = new createjs.Sprite(game.assets.spriteSheet, "hand-pointer"), this.handPointer.regX = .3 * this.handPointer.getBounds().width, this.drawSound = createjs.Sound.play(abcya.GameGlobals.GAME_THEME + "-theme", {
            loop: -1
        }), this.drawSound.volume = this.defaultSoundVolume, this.traceTime = new Date, this.on("mousedown", this.createStroke.bind(this)), this.on("pressup", this.saveStroke.bind(this))
    }, c.startTraceCharacter = function (a) {
        if (this.traceReady = !1, this.curTraceCharacter) {
            var b = this.curTraceCharacter.getBase();
            b.parent.removeChild(b), this.curTraceCharacter = null, this.traceDebug.graphics.clear()
        }
        for (this.curPathDisplay && (this.pathDisplayLayer.removeChild(this.curPathDisplay), this.curPathDisplay = null); this.traces.length > 0;) this.removeChild(this.traces.shift());
        this.traceScores = [], this.guideShowing && (this.handTween = null, this.removeChild(this.handPointer)), this.curTraceData = a, this.curTraceCharacter = new abcya.TraceCharacter(this.curTraceData, this.traceSheet);
        var c = this.curTraceCharacter.getBase();
        c.x = this.areaSize / 2 - c.getBounds().width / 2, c.y = this.areaSize / 2 - c.getBounds().height / 2 - 20, this.curBase = c, this.addChildAt(this.curBase, 1), this.traceDebug.x = this.curBase.x, this.traceDebug.y = this.curBase.y, this.curPathIndex = 0, this.startTracePath()
    }, c.startTracePath = function () {
        this.addChild(this.pathDisplayLayer), this.curPathDisplay = this.curTraceCharacter.getWorkingPath(this.curPathIndex), this.curPathDisplay.x = this.curBase.x, this.curPathDisplay.y = this.curBase.y, "I" == this.curTraceCharacter.charId && 2 == this.curPathIndex && (this.curPathDisplay.y += this.curBase.getBounds().height - 50), this.pathDisplayLayer.addChild(this.curPathDisplay), this.drawLayer = new createjs.Container, this.drawLayer.x = this.curBase.x, this.drawLayer.y = this.curBase.y, this.addChild(this.drawLayer), 2 == this.curTraceData.parts[this.curPathIndex].pathSegments[0].length ? (this.curTrack = this.curTraceData.parts[this.curPathIndex].pathSegments[0], this.showGuideDot()) : (this.curTrack = new abcya.TraceTrack(this.curTraceData.parts[this.curPathIndex].pathSegments, this.tracePtInterval, this.traceDebug), this.guideShowing = !0, this.moveGuideHand(0), this.handleTraceReady())
    }, c.finishTracePath = function (a) {
        this.pathDisplayLayer.removeChild(this.curPathDisplay),
            this.curPathDisplay = null, this.drawLayer.cache(-20, -20, this.curBase.getBounds().width + 40, this.curBase.getBounds().height + 40), this.traces.push(this.drawLayer), this.traceScores.push(a), this.drawLayer = null, this.userTraceMarkers = [], this.curPathIndex++, this.curPathIndex <= this.curTraceData.parts.length - 1 ? this.startTracePath() : this.finishTraceCharacter()
    }, c.moveGuideHand = function (a) {
        if (!this.guideShowing) return this.handTween = null, void this.removeChild(this.handPointer);
        0 == a && (this.handPointer.alpha = 1, this.handPointer.scaleX = this.handPointer.scaleY = 1, this.handPointer.x = this.curBase.x + this.curTrack.trackMarkers[0].cx, this.handPointer.y = this.curBase.y + this.curTrack.trackMarkers[0].cy, this.addChild(this.handPointer)), createjs.Tween.removeTweens(this.handPointer);
        var b = this.curTrack.trackMarkers[a];
        a < this.curTrack.trackMarkers.length - 1 ? this.handTween = createjs.Tween.get(this.handPointer).to({
            x: this.curBase.x + b.cx,
            y: this.curBase.y + b.cy
        }, 40).call(this.moveGuideHand, [a + 1], this) : this.handTween = createjs.Tween.get(this.handPointer).to({
            x: this.curBase.x + b.cx,
            y: this.curBase.y + b.cy
        }, 40).call(this.finishGuide, [], this)
    }, c.finishGuide = function () {
        this.guideShowing = !1, this.removeChild(this.handPointer)
    }, c.showGuideDot = function () {
        this.guideShowing = !0, this.handPointer.x = this.curBase.x + this.curTrack[0], this.handPointer.y = this.curBase.y + this.curTrack[1], this.handPointer.alpha = 0, this.handPointer.scaleX = this.handPointer.scaleY = 1.5, this.addChild(this.handPointer), createjs.Tween.get(this.handPointer).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 200, createjs.Ease.elasticOut).wait(300).call(this.handleDotReady, [], this)
    }, c.handleTraceReady = function () {
        this.furthestMarkerReached = 0, this.curPathMarker = 0, this.traceReady = !0
    }, c.handleDotReady = function () {
        this.removeChild(this.handPointer), this.guideShowing = !1, this.dotCompleted = !1, this.traceReady = !1, this.curPathDisplay.on("mousedown", this.handleDot, this, !0)
    }, c.finishTraceCharacter = function () {
        for (var a = 0, b = 0; b < this.traceScores.length;) a += this.traceScores[b], b++;
        a /= this.traceScores.length;
        var c = new createjs.Event("TRACE_COMPLETE");
        c._score = a, this.dispatchEvent(c)
    }, c.createStroke = function (a) {
        if (this.traceReady) {
            this.badTrace = !1, this.guideShowing && (this.guideShowing = !1, createjs.Tween.removeTweens(this.handPointer), this.removeChild(this.handPointer));
            var b = this.drawLayer.globalToLocal(a.stageX, a.stageY);
            a.stageX = b.x, a.stageY = b.y, this.currentStrokeSize = 30, this.currentStroke = new createjs.Shape, this.strokeSizeObj = this.currentStroke.graphics.setStrokeStyle(this.currentStrokeSize, "round").command, this.strokeObj = this.currentStroke.graphics.beginStroke("#fff").command, this.drawLayer.addChild(this.currentStroke);
            var c = {
                id: a.pointerID,
                touchEvt: a,
                itemSelected: this.currentStroke
            };
            a.pointerID == -1 ? this.pressPts = [c] : this.pressPts.push(c)
        }
    }, c.paint = function (a, b) {
        if (this.traceReady) {
            var c = this.drawLayer.globalToLocal(a, b);
            if (a = c.x, b = c.y, this.currentStroke.graphics.append(this.strokeSizeObj).lineTo(a, b), null != this.lastDrawMarker) {
                var d = calculateDistance(a, b, this.lastDrawMarker.x, this.lastDrawMarker.y);
                if (d >= this.tracePtInterval) {
                    this.lastDrawMarker = {
                        x: a,
                        y: b
                    }, this.userTraceMarkers.push(this.lastDrawMarker);
                    var e = new Date,
                        f = e.getTime(),
                        g = f - this.lastMarkerTime,
                        h = 100 / g;
                    this.drawSound.volume = h, this.lastMarkerTime = f
                }
            } else {
                this.lastDrawMarker = {
                    x: a,
                    y: b
                }, this.userTraceMarkers.push(this.lastDrawMarker);
                var i = new Date;
                this.lastMarkerTime = i.getTime()
            }
        }
    }, c.saveStroke = function (a) {
        if (this.traceReady && this.lastDrawMarker) {
            if (this.pressPts.length > 0)
                if (a.pointerID == -1) this.pressPts = [];
                else
                    for (var b = this.pressPts.length, c = 0; c < b; c++)
                        if (this.pressPts[c].id == a.pointerID) {
                            this.pressPts.splice(c, 1);
                            break
                        }
            var d = this.drawLayer.globalToLocal(game.stage.mouseX, game.stage.mouseY),
                e = calculateDistance(d.x, d.y, this.lastDrawMarker.x, this.lastDrawMarker.y);
            e > 0 && (this.lastDrawMarker = {
                x: d.x,
                y: d.y
            }, this.userTraceMarkers.push(this.lastDrawMarker)), this.traceReady && !this.badTrace && (this.traceReady = !1, this.curPathMarker >= this.curTrack.trackMarkers.length - 3 || this.curPathMarker < 3 && this.furthestMarkerReached > this.curTrack.trackMarkers.length / 2 ? this.compareUserPath() : this.handleBadTrace(), this.drawSound && (this.drawSound.volume = this.defaultSoundVolume), this.currentStroke = null)
        }
    }, c.compareUserPath = function () {
        var a = calculateDistance(this.userTraceMarkers[0].x, this.userTraceMarkers[0].y, this.curTrack.trackMarkers[0].cx, this.curTrack.trackMarkers[0].cy),
            b = calculateDistance(this.userTraceMarkers[this.userTraceMarkers.length - 1].x, this.userTraceMarkers[this.userTraceMarkers.length - 1].y, this.curTrack.trackMarkers[this.curTrack.trackMarkers.length - 1].cx, this.curTrack.trackMarkers[this.curTrack.trackMarkers.length - 1].cy);
        if (b > 4 * this.tracePtInterval) return b > 4 * this.tracePtInterval, void this.handleBadTrace();
        var c = this.comparePercent(25);
        if (c > 3 * this.tracePtInterval) return void this.handleBadTrace();
        var d = this.comparePercent(10),
            e = this.comparePercent(20),
            f = this.comparePercent(30),
            g = this.comparePercent(40),
            h = this.comparePercent(50),
            i = this.comparePercent(60),
            j = this.comparePercent(70),
            k = this.comparePercent(80),
            l = this.comparePercent(90),
            m = Math.round(a) + Math.round(b) + d + e + f + g + h + i + j + k + l;
        m /= 11, this.finishTracePath(m)
    }, c.comparePercent = function (a) {
        var b = Math.floor(this.curTrack.trackMarkers.length / (100 / a)),
            c = this.curTrack.trackMarkers[b],
            d = Math.floor(this.userTraceMarkers.length / (100 / a)),
            e = [];
        if (d > 0) {
            var f = calculateDistance(this.userTraceMarkers[d - 1].x, this.userTraceMarkers[d - 1].y, c.cx, c.cy);
            e.push(Math.round(f))
        }
        var g = calculateDistance(this.userTraceMarkers[d].x, this.userTraceMarkers[d].y, c.cx, c.cy);
        if (e.push(Math.round(g)), d < this.userTraceMarkers.length - 1) {
            var h = calculateDistance(this.userTraceMarkers[d + 1].x, this.userTraceMarkers[d + 1].y, c.cx, c.cy);
            e.push(Math.round(h))
        }
        var i = getLowestNum(e);
        return i
    }, c.handleBadTrace = function () {
        for (this.badTrace = !0; this.drawLayer.numChildren > 0;) this.drawLayer.removeChildAt(0);
        this.currentStroke = null, this.userTraceMarkers = [], this.pressPts = [], this.handleTraceReady(), this.guideShowing = !0, this.moveGuideHand(0)
    }, c.handleDot = function (a) {
        if (1 != this.dotCompleted) {
            this.dotCompleted = !0;
            var b = new createjs.Shape;
            b.graphics.beginFill("#FFF").drawCircle(0, 0, 20), b.x = game.stage.mouseX - this.x - this.drawLayer.x, b.y = game.stage.mouseY - this.y - this.drawLayer.y, this.drawLayer.addChild(b), createjs.Tween.get(b).wait(300).call(this.finishTracePath, [], this)
        }
    }, c.updateWorkArea = function () {
        if (this.pressPts.length > 0)
            if (this.traceReady) {
                for (var a = this.curPathMarker - 5, b = this.curTrack.trackMarkers.length, c = [], d = []; a < this.curPathMarker + 5;) {
                    var e = a;
                    e < 0 && (e = b - Math.abs(e)), e > b - 1 && (e -= b);
                    var f = calculateDistance(game.stage.mouseX - this.x - this.curBase.x, game.stage.mouseY - this.y - this.curBase.y, this.curTrack.trackMarkers[e].cx, this.curTrack.trackMarkers[e].cy),
                        g = a == this.curTrack.trackMarkers.length - 1 || 0 == a ? 3 : 2;
                    f < this.tracePtInterval * g && (c.push(this.curTrack.trackMarkers[e]), d.push(f)), a++
                }
                if (c.length > 0) {
                    for (var h = 0; h < c.length;) h++;
                    var i = getLowestNum(d),
                        j = this.curTrack.trackMarkers.indexOf(c[d.indexOf(i)]);
                    j > this.furthestMarkerReached && (this.furthestMarkerReached = j), this.curPathMarker = j, this.paint(game.stage.mouseX, game.stage.mouseY), this.drawSound && (this.drawSound.volume = 1)
                } else this.handleBadTrace(), this.drawSound && (this.drawSound.volume = this.defaultSoundVolume)
            } else this.drawSound && (this.drawSound.volume = this.defaultSoundVolume);
        else this.drawSound && (this.drawSound.volume = this.defaultSoundVolume);
        this.drawSound ? this.playerIsTracing = 1 == this.drawSound.volume : this.playerIsTracing = !1
    }, c.getCompleteTrace = function () {
        for (var a = new createjs.Container; this.traces.length > 0;) {
            var b = this.traces.shift();
            b.x -= this.curBase.x, b.y -= this.curBase.y, a.addChild(b)
        }
        var c = new createjs.Shape;
        return c.graphics.beginFill("#fff").drawRect(0, 0, this.curBase.getBounds().width, this.curBase.getBounds().height), c.alpha = 0, a.addChildAt(c, 0), a
    }, c.cleanUpWorkArea = function () {
        this.drawSound
    }, a.abcya.TraceWorkArea = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.bonusDropArea = null, c.bonusCharacters = null, c.backBtn = null, c.presstPts = null, c.bonusMusic = null, c.bonusMusicStep = null, c.numPerStep = null, c.instSound = null, c.initialize = function () {
        abcya.GameGlobals.GAME_BG.showBg("bg-" + abcya.GameGlobals.GAME_THEME), this.pressPts = [];
        var a = game.assets.getAsset("trace-data"),
            b = a[abcya.GameGlobals.TRACE_GROUP];
        this.bonusCharacters = [];
        for (var c = [], d = 0, e = 0; this.bonusCharacters.length < b.length;) {
            var f, g = b[this.bonusCharacters.length].traceId;
            if (abcya.GameGlobals.USER_TRACES.hasOwnProperty(g)) f = abcya.GameGlobals.USER_TRACES[g].traces[0].letterTrace;
            else {
                f = new createjs.Container;
                var h = new createjs.Text(g, "465pt printbold", "#fff");
                h.textBaseline = "hanging", f.addChild(h)
            }
            f.x = 0, f.y = 0;
            var i = new abcya.BonusGamePiece(f, g);
            d + i.getBounds().height >= game.screen_height && (e++, d = 0), d += i.getBounds().height, this.addChild(i), this.bonusCharacters.push(i), i.on("mousedown", this.handlePressDown.bind(this)), c.push(g)
        }
        this.bonusDropArea = new abcya.BonusGameArea(c), this.bonusDropArea.x = game.screen_width / 2 - this.bonusDropArea.bonusAreaSize / 2, this.bonusDropArea.y = game.screen_height / 2 - this.bonusDropArea.bonusAreaSize / 2, this.addChild(this.bonusDropArea), this.on("pressmove", this.handlePressMove.bind(this)), this.on("pressup", this.handlePressUp.bind(this)), this.scrambleCharacters(), !game.isMobile, this.numsPerStep = Math.floor(this.bonusCharacters.length / 5), this.bonusMusicStep = 1, this.bonusMusic = createjs.Sound.play(abcya.GameGlobals.GAME_THEME + "-bonus-part-1", {
            loop: -1
        }), this.numPlaced = 0, this.instSound = createjs.Sound.play("bonus-instructions"), this.bonusDropArea.startPulse()
    }, c.handleKeyboardDown = function (a) {
        this.cleanUp("game")
    }, c.scrambleCharacters = function () {
        var a = 60,
            b = 30,
            c = game.screen_height / a,
            d = game.screen_width / b,
            e = this.bonusCharacters.slice(0);
        this.bonusDropArea.cache(0, 0, this.bonusDropArea.bonusAreaSize, this.bonusDropArea.bonusAreaSize);
        var f = new createjs.Bitmap(this.bonusDropArea.cacheCanvas);
        f.x = this.bonusDropArea.x, f.y = this.bonusDropArea.y;
        var g = new createjs.Container,
            h = new createjs.Shape;
        h.graphics.beginFill("#000").drawRect(0, 0, b, a), g.addChild(h), g.cache(0, 0, b, a);
        for (var i = new createjs.Bitmap(g.cacheCanvas), j = [], k = 1; k < c - 2; k++)
            for (var l = 1; l < d - 2; l++) {
                i.x = l * b, i.y = k * a;
                var m = ndgmr.checkPixelCollision(f, i, 0);
                m || j.push({
                    x: l * b,
                    y: k * a
                })
            }
        for (g.uncache(), this.bonusDropArea.uncache(); j.length > 0 && e.length > 0;) {
            var n = e.shift(),
                o = getRandom(0, j.length - 1),
                p = j[o];
            n.x = p.x + n.getBounds().width / 2 + getRandom(-2, 2), n.y = p.y + n.getBounds().height / 2 + getRandom(-2, 2), j.splice(o, 1)
        }
    }, c.finishBonus = function () {
        var a = new createjs.Text("GOOD JOB!", "60pt printbold", "#fff"),
            b = new createjs.Container;
        b.addChild(a), b.regX = b.getBounds().width / 2, b.regY = b.getBounds().height / 2, b.x = game.screen_width / 2, b.y = this.bonusDropArea.y + b.getBounds().height + 40, b.scaleX = b.scaleY = 0, this.addChild(b);
        var c = new abcya.PopOutButton("menu");
        c.x = this.bonusDropArea.x + .75 * this.bonusDropArea.bonusAreaSize + c.btnDisplay.getBounds().width / 2, c.y = this.bonusDropArea.y + .75 * this.bonusDropArea.bonusAreaSize + c.btnDisplay.getBounds().height / 2, this.addChild(c), createjs.Sound.play("you-did-it"), c.on("mousedown", this.dismissBonus, this, !0), createjs.Tween.get(b).to({
            scaleX: 1,
            scaleY: 1
        }, 300, createjs.Ease.backIn).wait(200).call(function (a) {
            a.popIn()
        }, [c], this)
    }, c.handlePressDown = function (a) {
        var b = a.currentTarget;
        if (b.startX = b.x, b.startY = b.y, b) {
            this.addChild(b);
            var c = {
                id: a.pointerID,
                itemSelected: b
            };
            a.pointerID == -1 ? this.pressPts = [c] : this.pressPts.push(c)
        }
    }, c.handlePressMove = function (a) {
        if (this.pressPts.length > 0) {
            var b;
            if (a.pointerID == -1) b = this.pressPts[0];
            else
                for (var c = 0; c < this.pressPts.length; c++)
                    if (a.pointerID == this.pressPts[c].id) {
                        b = this.pressPts[c];
                        break
                    } var d = game.isMobile ? 100 : 0;
            b.itemSelected.x = a.stageX, b.itemSelected.y = a.stageY - d
        }
    }, c.handlePressUp = function (a) {
        if (this.pressPts.length > 0) {
            var b;
            if (a.pointerID == -1) b = this.pressPts[0].itemSelected, this.pressPts = [];
            else
                for (var c = this.pressPts.length, d = 0; d < c; d++)
                    if (this.pressPts[d].id == a.pointerID) {
                        b = this.pressPts[d].itemSelected, this.pressPts.splice(d, 1);
                        break
                    } if (!b) return;
            b.cache(0, 0, b.getBounds().width, b.getBounds().height + 5);
            var e = new createjs.Bitmap(b.cacheCanvas);
            e.x = b.x, e.y = b.y;
            for (var f = !1, g = [], h = 0; h < this.bonusDropArea.placeHolders.length; h++) {
                var i = this.bonusDropArea.placeHolders[h];
                i.cache(-(this.bonusDropArea.holderSize / 2 + 5), -this.bonusDropArea.holderSize / 2 + 5, this.bonusDropArea.holderSize + 10, this.bonusDropArea.holderSize + 10);
                var j = new createjs.Bitmap(i.cacheCanvas);
                j.x = this.bonusDropArea.x + i.x, j.y = this.bonusDropArea.y + i.y;
                var k = ndgmr.checkPixelCollision(e, j, 0);
                k && g.push(i), i.uncache()
            }
            for (b.uncache(); g.length > 0;) {
                var l = g.shift();
                l.targetVal == b.pieceId && (b.removeAllEventListeners(), l.fillWithClip(b), this.bonusCharacters.splice(this.bonusCharacters.indexOf(b), 1), f = !0, this.numPlaced++, g = [])
            }
            if (f) {
                var m = Math.floor(this.numPlaced / this.numsPerStep) + 1;
                m > this.bonusMusicStep && (this.bonusMusicStep = m, m <= 5 && this.changeMusicStep())
            } else createjs.Tween.get(b).to({
                x: b.startX,
                y: b.startY
            }, 300, createjs.Ease.quadOut);
            this.bonusCharacters.length <= 0 && this.finishBonus()
        }
    }, c.changeMusicStep = function () {
        var a = this.bonusMusic.position;
        this.bonusMusic.stop(), this.bonusMusic = createjs.Sound.play(abcya.GameGlobals.GAME_THEME + "-bonus-part-" + this.bonusMusicStep.toString(), {
            loop: -1
        }), this.bonusMusic.setPosition(a)
    }, c.tick = function (a) {}, c.layoutRatio = function () {}, c.dismissBonus = function (a) {
        this.cleanUp("intro")
    }, c.cleanUp = function (a) {
        for (this.bonusMusic.stop(), this.bonusMusic = null, createjs.Sound.removeSound("bonus-instructions"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-1"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-2"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-3"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-4"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-5"), createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-bonus-part-6"); this.getNumChildren() > 0;) this.removeChild(this.getChildAt(0));
        "intro" == a ? this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_INTRO) : this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_GAME)
    }, a.abcya.BonusScreen = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.resultsPopUp = null, c.character = null, c.initialize = function () {
        abcya.GameGlobals.GAME_BG.showBg("headquarters-bg", []), this.character = new createjs.Container;
        var a = new createjs.Bitmap(game.assets.getAsset("kit-foxtail"));
        a.x = -a.getBounds().width / 2, a.y = -a.getBounds().height, this.character.addChild(a), this.character.x = .2 * game.screen_width, this.character.y = game.screen_height, this.addChild(this.character), createjs.Tween.get(this.character).to({
            x: .2 * game.screen_width
        }, 300, createjs.Ease.backOut), createjs.Tween.get(this.character).to({
            scaleX: 1,
            scaleY: 1,
            x: .2 * game.screen_width,
            y: game.screen_height
        }, 400, createjs.Ease.backOut), this.resultsPopUp = new abcya.ResultsPopUp(abcya.GameGlobals.SAFE_MONEY), this.resultsPopUp.regX = this.resultsPopUp.getBounds().width / 2, this.resultsPopUp.regY = this.resultsPopUp.getBounds().height / 2, this.resultsPopUp.x = .75 * game.screen_width, this.resultsPopUp.y = game.screen_height / 2, this.resultsPopUp.scaleX = this.resultsPopUp.scaleY = 0, this.addChild(this.resultsPopUp), createjs.Tween.get(this.resultsPopUp).wait(500).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut), this.resultsPopUp.on("POPUP_DISMISS", this.closeEndScreen, this, !0)
    }, c.closeEndScreen = function (a) {
        createjs.Tween.get(this.character).wait(0).to({
            x: -game.screen_width / 2
        }, 300, createjs.Ease.backIn), createjs.Tween.get(this.resultsPopUp).wait(150).to({
            scaleX: 0,
            scaleY: 0
        }, 300, createjs.Ease.backIn), createjs.Tween.get(this).wait(500).call(this.cleanUp, [], this)
    }, c.tick = function (a) {}, c.layoutRatio = function () {}, c.cleanUp = function () {
        for (; this.getNumChildren() > 0;) this.removeChild(this.getChildAt(0));
        this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_INTRO)
    }, a.abcya.EndScreen = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.topBar = null, this.bottomBar = null, this.workArea = null, this.gameTraceCharacters = null, this.curTraceIndex = null, this.traceCharacterSound = null, this.instSound = null, this.curTraceScore = null, this.bgItems = null, this.bgMoving = null, this.bgTween = null, this.instSoundNum = null, this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.initialize = function () {
        abcya.GameGlobals.GAME_BG.showBg("bg-" + abcya.GameGlobals.GAME_THEME), this.bgItems = new createjs.Bitmap(game.assets.getAsset(abcya.GameGlobals.GAME_THEME + "-bg-items")), this.bgItems.regX = this.bgItems.getBounds().width / 2, this.bgItems.regY = this.bgItems.getBounds().height / 2, this.bgItems.x = game.screen_width / 2, this.bgItems.y = game.screen_height / 2, this.addChild(this.bgItems), null == abcya.GameGlobals.USER_TRACES && (abcya.GameGlobals.USER_TRACES = {}), this.workArea = new abcya.TraceWorkArea, this.workArea.x = game.screen_width / 2 - this.workArea.areaSize / 2, this.workArea.y = game.screen_height / 2 - this.workArea.areaSize / 2, this.addChild(this.workArea), this.workArea.on("TRACE_COMPLETE", this.finishTrace.bind(this));
        var a = game.assets.getAsset("trace-data");
        this.gameTraceCharacters = a[abcya.GameGlobals.TRACE_GROUP];
        for (var b = this.gameTraceCharacters.length, c = []; c.length < b;) c.push(this.gameTraceCharacters[c.length].traceId);
        this.topBar = new abcya.TraceSelectBar(c), this.addChild(this.topBar), this.topBar.on("SELECT_TRACE_CHARACTER", this.handleTraceSelect.bind(this)), this.bottomBar = new abcya.TraceProgressBar(c), this.bottomBar.y = game.screen_height - this.bottomBar.progressBarHeight, this.addChild(this.bottomBar);
        var d = new createjs.Sprite(game.assets.spriteSheet, "menu-btn");
        d.scaleX = d.scaleY = .5, d.x = game.screen_width - d.getBounds().width * d.scaleX - 20, d.y = this.bottomBar.y - d.getBounds().height * d.scaleY - 20, this.addChild(d), d.on("mousedown", this.handleBackBtn, this, !0), this.instSoundNum = 1, this.playInstSound(), !game.isMobile, createjs.Tween.get(this).wait(100).call(this.startTrace, [0], this)
    }, c.playInstSound = function () {
        this.instSound = createjs.Sound.play("inst-" + this.instSoundNum.toString()), this.instSoundNum++, this.instSoundNum <= 3 && this.instSound.on("complete", this.playInstSound, this, !0)
    }, c.handleKeyboardDown = function (a) {
        this.shortCutToBonus()
    }, c.restartGame = function () {
        this.cleanUp()
    }, c.startTrace = function (a) {
        this.curTraceIndex = a;
        var b = this.gameTraceCharacters[a];
        this.workArea.startTraceCharacter(b), this.topBar.showTab(this.curTraceIndex)
    }, c.finishTrace = function (a) {
        this.curTraceScore = a._score, this.instSound && (this.instSound.stop(), this.instSound = null), this.letterSound = createjs.Sound.play("sound" + this.gameTraceCharacters[this.curTraceIndex].traceId.toLowerCase()), this.letterSound.on("complete", this.handleTraceSoundComplete, this, !0)
    }, c.handleTraceSoundComplete = function (a) {
        this.letterSound = null;
        var b = this.workArea.getCompleteTrace();
        b.setBounds(0, 0, this.workArea.curBase.getBounds().width, this.workArea.curBase.getBounds().height);
        var c;
        if (abcya.GameGlobals.USER_TRACES.hasOwnProperty(this.gameTraceCharacters[this.curTraceIndex].traceId)) {
            c = abcya.GameGlobals.USER_TRACES[this.gameTraceCharacters[this.curTraceIndex].traceId];
            for (var d = -1, e = 0; e < c.traces.length && d < 0;) c.traces[e].traceScore > this.curTraceScore && (d = e), e++;
            d == -1 ? c.traces.push({
                letterTrace: b,
                traceScore: this.curTraceScore
            }) : c.traces.splice(d, 0, {
                letterTrace: b,
                traceScore: this.curTraceScore
            })
        } else c = {}, c.traces = [{
            letterTrace: b,
            traceScore: this.curTraceScore
        }], abcya.GameGlobals.USER_TRACES[this.gameTraceCharacters[this.curTraceIndex].traceId] = c;
        if (this.bottomBar.showProgress(this.gameTraceCharacters[this.curTraceIndex].traceId), this.curTraceIndex = this.getNextTrace(), null != this.curTraceIndex) this.startTrace(this.curTraceIndex);
        else {
            var f = createjs.Sound.play("you-did-it");
            f.on("complete", this.getReadyForBonus, this, !0)
        }
    }, c.getNextTrace = function () {
        for (var a = null, b = 0; b < this.gameTraceCharacters.length && null == a;) {
            var c = this.gameTraceCharacters[b].traceId;
            abcya.GameGlobals.USER_TRACES.hasOwnProperty(c) || (a = b), b++
        }
        return a
    }, c.handleTraceSelect = function (a) {
        this.startTrace(a._charIndexSelected)
    }, c.handleUi = function (a) {}, c.tick = function (a) {
        this.workArea && (this.workArea.updateWorkArea(), this.workArea.playerIsTracing ? this.bgMoving || (this.bgMoving = !0, this.moveBg()) : this.bgMoving && (this.bgMoving = !1, this.stopBg()))
    }, c.moveBg = function () {
        this.bgMoving && ("rock" == abcya.GameGlobals.GAME_THEME ? this.bgTween = createjs.Tween.get(this.bgItems).to({
            rotation: -3
        }, 200, createjs.Ease.quadOut).to({
            rotation: 3
        }, 400).to({
            rotation: 0
        }, 200, createjs.Ease.quadIn).call(this.moveBg, [], this) : "pop" == abcya.GameGlobals.GAME_THEME ? this.bgTween = createjs.Tween.get(this.bgItems).to({
            y: game.screen_height / 2 - 5
        }, 200, createjs.Ease.quadOut).to({
            y: game.screen_height / 2
        }, 200, createjs.Ease.backOut).call(this.moveBg, [], this) : "classical" == abcya.GameGlobals.GAME_THEME ? this.bgTween = createjs.Tween.get(this.bgItems).to({
            x: game.screen_width / 2 + 5,
            scaleX: 1.01,
            scaleY: 1.01,
            rotation: -3
        }, 800, createjs.Ease.quadInOut).wait(200).to({
            x: game.screen_width / 2,
            scaleX: 1,
            scaleY: 1,
            rotation: 0
        }, 800, createjs.Ease.quadInOut).wait(200).call(this.moveBg, [], this) : "island" == abcya.GameGlobals.GAME_THEME && (this.bgTween = createjs.Tween.get(this.bgItems).to({
            scaleX: 1.025,
            scaleY: 1.025
        }, 400, createjs.Ease.backIn).to({
            scaleX: 1,
            scaleY: 1
        }, 300, createjs.Ease.backOut).call(this.moveBg, [], this)))
    }, c.stopBg = function () {
        this.bgMoving = !1, createjs.Tween.removeTweens(this.bgItems), this.bgTween = createjs.Tween.get(this.bgItems).to({
            rotation: 0,
            scaleX: 1,
            scaleY: 1,
            x: game.screen_width / 2,
            y: game.screen_height / 2
        }, 100, createjs.Ease.quadOut)
    }, c.layoutRatio = function () {}, c.handleBackBtn = function (a) {
        this.cleanUp("intro")
    }, c.getReadyForBonus = function () {
        var a = new createjs.LoadQueue;
        a.installPlugin(createjs.Sound), a.setMaxConnections(4), a.on("complete", this.handleBonusSoundsLoaded, this, !0);
        var b = abcya.GameConfig.GAME_AUDIO_ASSETS_PATH,
            c = [{
                id: "bonus-instructions",
                src: "bonus-instructions.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-1",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_1.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-2",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_2.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-3",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_3.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-4",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_4.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-5",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_5.ogg",
                data: 1
            }, {
                id: abcya.GameGlobals.GAME_THEME + "-bonus-part-6",
                src: abcya.GameGlobals.GAME_THEME + "_bonus_part_6.ogg",
                data: 1
            }];
        createjs.Sound.alternateExtensions = ["mp3"], a.loadManifest(c, !1, b), a.load()
    }, c.handleBonusSoundsLoaded = function () {
        this.cleanUp()
    }, c.cleanUp = function (a) {
        for (createjs.Sound.removeSound(abcya.GameGlobals.GAME_THEME + "-theme"), this.workArea.cleanUpWorkArea(); this.getNumChildren() > 0;) this.removeChild(this.getChildAt(0));
        "intro" == a ? this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_INTRO) : this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_END)
    }, c.shortCutToBonus = function () {
        for (this.workArea.cleanUpWorkArea(); this.getNumChildren() > 0;) this.removeChild(this.getChildAt(0));
        this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_END)
    }, a.abcya.GameScreen = createjs.promote(b, "Container")
}(window),
function (a) {
    function b() {
        this.Container_constructor(), this.initialize()
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.titleBg = null, c.titleClip = null, c.subTitleClip = null, c.goBtn = null, c.selectCircle = null, c.selectTxt = null, c.selectBtns = null, c.selectState = null, c.selectionMade = null, c.backBtn = null, c.introVoice = null, c.introSound = null, c.btnShowIndex = null, c.initialize = function () {}, c.beginIntro = function () {
        this.introSoundIds = ["trace-inst-sound", "intro-theme", "title-sound", "new-title", "rock-select", "pop-select", "classical-select", "island-select", "uppercase-select", "lowercase-select", "numbers-select"], this.loader = null;
        var a = "intro-theme";
        if (null != game.assets.getAsset(a)) this.setUpIntro();
        else {
            var b = abcya.GameConfig.GAME_AUDIO_ASSETS_PATH;
            this.loader = game.assets.preload, this.loader.on("complete", this.handleIntroSoundsLoaded, this, !0);
            for (var c = []; c.length < this.introSoundIds.length;) {
                var d = {
                    id: this.introSoundIds[c.length],
                    src: this.introSoundIds[c.length] + ".ogg",
                    data: 1
                };
                c.push(d)
            }
            createjs.Sound.alternateExtensions = ["mp3"], this.loader.loadManifest(c, !1, b), this.loader.load()
        }
    }, c.handleIntroSoundsLoaded = function (a) {
        this.setUpIntro()
    }, c.setUpIntro = function () {
        abcya.GameGlobals.GAME_BG.showBg("bg-intro", []), this.titleBg = createCenteredSprite(game.assets.spriteSheet, "title-bg"), this.titleBg.x = game.screen_width / 2, this.titleBg.y = -this.titleBg.getBounds().height, this.titleBg.endY = game.screen_height / 3, this.titleClip = createCenteredSprite(game.assets.spriteSheet, "title-text-clip"), this.titleClip.x = this.titleBg.x - 10, this.titleClip.y = this.titleBg.endY - this.titleClip.getBounds().height / 2 + 15, this.titleClip.alpha = 0, this.titleClip.scaleX = this.titleClip.scaleY = 0, this.subTitleClip = createCenteredSprite(game.assets.spriteSheet, "title-subtxt-clip"), this.subTitleClip.x = this.titleClip.x, this.subTitleClip.y = this.titleBg.endY + this.subTitleClip.getBounds().height / 2 + 20, this.subTitleClip.alpha = 0, this.subTitleClip.scaleX = this.subTitleClip.scaleY = 0, this.goBtn = new abcya.PopOutButton("start"), this.goBtn.x = .5 * game.screen_width, this.goBtn.y = game.screen_height - this.goBtn.btnDisplay.getBounds().height, this.addChild(this.titleBg, this.titleClip, this.subTitleClip, this.goBtn), this.startIntro()
    }, c.startIntro = function () {
        this.introVoice = createjs.Sound.play("new-title"), this.introSound = createjs.Sound.play("intro-theme", {
            loop: -1
        }), createjs.Tween.get(this.titleBg).to({
            y: this.titleBg.endY
        }, 400, createjs.Ease.backOut), createjs.Tween.get(this.titleClip).wait(400).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 250, createjs.Ease.backOut), createjs.Tween.get(this.subTitleClip).wait(650).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 250, createjs.Ease.backOut).call(this.introReady, [], this)
    }, c.introReady = function () {
        this.goBtn.popIn(), this.goBtn.on("mousedown", this.handleGoBtn, this, !0)
    }, c.handleGoBtn = function (a) {
        createjs.Sound.play("game-click"), this.introVoice && (this.introVoice.stop(), this.introVoice = null), a.currentTarget.popOut(), createjs.Tween.get(this.subTitleClip).to({
            alpha: 0,
            scaleX: 0,
            scaleY: 0
        }, 250, createjs.Ease.backIn), createjs.Tween.get(this.titleClip).wait(250).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 250, createjs.Ease.backIn), createjs.Tween.get(this.titleBg).wait(500).to({
            y: -this.titleBg.getBounds().height
        }, 400, createjs.Ease.backIn).call(this.startSelect, [], this)
    }, c.startSelect = function () {
        this.removeChild(this.titleClip), this.removeChild(this.subTitleClip), this.removeChild(this.titleBg), this.selectCircle = new createjs.Shape, this.selectCircle.graphics.beginFill("#77686C").setStrokeStyle(4).beginStroke("#AA9FA3").drawCircle(0, 0, 310), this.selectCircle.x = game.screen_width / 3 + 50, this.selectCircle.y = game.screen_height / 2, this.selectCircle.scaleX = this.selectCircle.scaleY = 0, this.selectCircle.alpha = 0, this.addChild(this.selectCircle), createjs.Tween.get(this.selectCircle).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut), this.selectTxt = createCenteredSprite(game.assets.spriteSheet, "trace-select-txt"), this.selectTxt.x = this.selectCircle.x, this.selectTxt.y = this.selectCircle.y, this.selectTxt.scaleX = this.selectTxt.scaleY = 0, this.selectTxt.alpha = 0, this.addChild(this.selectTxt), createjs.Tween.get(this.selectTxt).wait(400).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 250, createjs.Ease.backOut), this.introVoice = createjs.Sound.play("game-select-inst"), this.introVoice.on("complete", this.startGameSelect, this, !0)
    }, c.startGameSelect = function () {
        var a = ["uppercase", "lowercase", "numbers"];
        this.selectState = "trace", createjs.Tween.get(this).wait(300).call(this.showBtns, [a], this)
    }, c.startThemeSelect = function () {
        this.selectTxt = createCenteredSprite(game.assets.spriteSheet, "theme-select-txt"), this.selectTxt.x = this.selectCircle.x, this.selectTxt.y = this.selectCircle.y, this.selectTxt.scaleX = this.selectTxt.scaleY = 0, this.selectTxt.alpha = 0, this.addChild(this.selectTxt), createjs.Tween.get(this.selectTxt).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 250, createjs.Ease.backOut);
        var a = ["rock", "pop", "classical", "island"];
        this.selectState = "theme", createjs.Tween.get(this).wait(300).call(this.showBtns, [a], this), this.backBtn = new abcya.PopOutButton("back"), this.backBtn.x = this.selectCircle.x - 200, this.backBtn.y = this.selectCircle.y + 200, this.addChild(this.backBtn)
    }, c.showBtns = function (a) {
        var b = 0,
            c = 5;
        for (this.selectBtns = []; this.selectBtns.length < a.length;) {
            var d = new createjs.Sprite(game.assets.spriteSheet, a[this.selectBtns.length] + "-select-btn");
            d._btnName = a[this.selectBtns.length], b += d.getBounds().height + c, this.selectBtns.push(d)
        }
        b -= c;
        for (var e = 0; e < this.selectBtns.length;) {
            var f = 3 == this.selectBtns.length ? 5 : 8,
                g = 0 == e || e == this.selectBtns.length - 1 ? -(10 * f) : 0,
                h = this.selectCircle.x + 310 - this.selectBtns[e].getBounds().width + 270 + g;
            this.selectBtns[e]._endX = h, this.selectBtns[e].x = this.selectCircle.x - this.selectBtns[e].getBounds().width / 2, this.selectBtns[e].y = this.selectCircle.y - b / 2 + e * (this.selectBtns[0].getBounds().height + c), this.addChildAt(this.selectBtns[e], 0), e++
        }
        this.backBtn && (this.backBtn.popIn(), this.backBtn.on("mousedown", this.handleBackBtn.bind(this))), this.selectionMade = !1, this.btnShowIndex = 0, this.moveOutBtn()
    }, c.moveOutBtn = function () {
        if (this.btnShowIndex <= this.selectBtns.length - 1) {
            var a = this.selectBtns[this.btnShowIndex];
            this.btnShowIndex++, createjs.Tween.get(a).to({
                x: a._endX
            }, 200, createjs.Ease.backOut), this.introVoice = createjs.Sound.play(a._btnName + "-select"), this.introVoice.on("complete", this.moveOutBtn, this, !0)
        } else
            for (var b = 0; b < this.selectBtns.length;) this.selectBtns[b].on("mousedown", this.handleSelectBtn.bind(this)), b++
    }, c.hideBtns = function (a) {
        for (this.removeChild(this.selectTxt), this.backBtn && (this.removeChild(this.backBtn), this.backBtn = null); this.selectBtns.length > 0;) {
            var b = this.selectBtns.shift();
            createjs.Tween.get(b).wait(50 * this.selectBtns.length).to({
                x: this.selectCircle.x - b.getBounds().width / 2
            }, 200, createjs.Ease.backIn).call(function (a) {
                a.parent.removeChild(a)
            }, [b], this)
        }
        a && createjs.Tween.get(this).wait(50 * this.selectBtns.length + 200).call(a, [], this)
    }, c.handleSelectBtn = function (a) {
        if (0 == this.selectionMade) {
            this.selectionMade = !0, createjs.Sound.play("game-click"), this.introVoice && (this.introVoice.stop(), this.introVoice = null);
            var b = null;
            if ("trace" == this.selectState) abcya.GameGlobals.TRACE_GROUP = a.currentTarget._btnName, b = this.startThemeSelect;
            else {
                if ("theme" != this.selectState) return;
                abcya.GameGlobals.GAME_THEME = a.currentTarget._btnName, b = this.finishIntroScreen
            }
            this.hideBtns(b)
        }
    }, c.handleBackBtn = function (a) {
        createjs.Sound.play("game-click");
        var b = this.startGameSelect;
        this.hideBtns(b)
    }, c.finishIntroScreen = function () {
        for (this.introSound.stop(), this.introSound = null, createjs.Tween.get(this.selectCircle).to({
                alpha: 0,
                scaleX: 0,
                scaleY: 0
            }, 400, createjs.Ease.backIn); this.introSoundIds.length > 0;) {
            var a = this.introSoundIds.shift();
            game.assets.preload.remove(a)
        }
        var b = new createjs.LoadQueue;
        b.installPlugin(createjs.Sound), b.setMaxConnections(4), b.on("complete", this.handleThemeSoundLoaded, this, !0);
        var c = abcya.GameConfig.GAME_AUDIO_ASSETS_PATH,
            d = [{
                id: abcya.GameGlobals.GAME_THEME + "-theme",
                src: abcya.GameGlobals.GAME_THEME + "-theme-song.ogg",
                data: 1
            }];
        createjs.Sound.alternateExtensions = ["mp3"], b.loadManifest(d, !1, c), b.load()
    }, c.handleThemeSoundLoaded = function () {
        this.cleanUp()
    }, c.tick = function (a) {}, c.layoutRatio = function () {}, c.cleanUp = function () {
        for (; this.getNumChildren() > 0;) this.removeChild(this.getChildAt(0));
        this.dispatchEvent(abcya.GameStateEvents.GE_SHOW_GAME)
    }, a.abcya.IntroScreen = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a) {
        this.Container_constructor(), this.initialize(a)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.btnDisplay = null, c.btnValue = null, c.initialize = function (a) {
        this.btnValue = a, this.btnDisplay = new createjs.Sprite(game.assets.spriteSheet, a + "-btn"), this.btnDisplay.regX = this.btnDisplay.getBounds().width / 2, this.btnDisplay.regY = this.btnDisplay.getBounds().height / 2, this.addChild(this.btnDisplay), this.btnDisplay.scaleX = this.btnDisplay.scaleY = 0,
            this.btnDisplay.alpha = 0
    }, c.popIn = function () {
        createjs.Tween.get(this.btnDisplay).to({
            alpha: 1,
            scaleX: 1,
            scaleY: 1
        }, 500, createjs.Ease.elasticOut)
    }, c.popOut = function () {
        createjs.Tween.get(this.btnDisplay).to({
            alpha: 0,
            scaleX: 0,
            scaleY: 0
        }, 500, createjs.Ease.elasticIn).call(this.cleanUpBtn, [], this)
    }, c.setSelected = function () {}, c.highlightBtn = function () {}, c.cleanUpBtn = function () {}, a.abcya.PopOutButton = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a) {
        this.Container_constructor(), this.initialize(a)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.initialize = function (a) {
        var b = new createjs.Sprite(game.assets.spriteSheet, "practice-popup-bg-" + abcya.GameGlobals.GAME_THEME);
        this.addChild(b);
        for (var c = a.traces, d = (c[0].letterTrace, b.getBounds().width / 4), e = (b.getBounds().height - 40) / 3, f = d / c[0].letterTrace.getBounds().width, g = e / c[0].letterTrace.getBounds().height, h = getLowestNum([f, g]), i = 0, j = c.length < 9 ? c.length : 9; i < j;) {
            var k = c[i].letterTrace;
            k.regX = k.getBounds().width / 2, k.scaleX = k.scaleY = h;
            var l = 0 == i ? 0 : Math.floor(i / 3),
                m = i - 3 * l;
            k.x = d + m * d, k.y = 5 + l * (e + 2), this.addChild(k), i++
        }
    }, a.abcya.TracePracticePopUp = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a) {
        this.Container_constructor(), this.initialize(a)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.progressBarHeight = null, c.progressCharacters = null, c.practicePopUp = null, c.initialize = function (a) {
        this.progressBarHeight = 45;
        var b, c;
        switch (abcya.GameGlobals.GAME_THEME) {
            case "rock":
                b = "#E02222", c = "#FFE471";
                break;
            case "classical":
                b = "#0290C1", c = "#71FFFF";
                break;
            case "pop":
                b = "#D30092", c = "#FFFCEE";
                break;
            case "island":
                b = "#96CC00", c = "#FFF87D"
        }
        var d = new createjs.Shape;
        d.graphics.beginFill(b).drawRect(0, 0, game.screen_width, this.progressBarHeight), this.addChild(d);
        var e = 10;
        for (this.progressCharacters = []; this.progressCharacters.length < a.length;) {
            var f = a[this.progressCharacters.length],
                g = new createjs.Container,
                h = new createjs.Text(f, "36pt " + abcya.GameGlobals.CHAR_FONT, c);
            g.addChild(h);
            var i = h.getMeasuredWidth();
            e += i, i < 20 && (i = 20);
            var j = new createjs.Shape;
            j.graphics.beginFill("#000").drawRect(0, 0, i, h.getMeasuredHeight()), g.hitArea = j, g._charTxt = h, g._charVal = f, g._charWidth = i, g.alpha = .5, this.progressCharacters.push(g)
        }
        for (var k = (game.screen_width - e) / this.progressCharacters.length, l = 0, m = this.progressCharacters.length; l < m;) {
            var n = this.progressCharacters[l];
            n.x = 0 == l ? k / 2 : this.progressCharacters[l - 1].x + this.progressCharacters[l - 1]._charWidth + k, this.addChild(n), l++
        }
        this.cache(0, 0, game.screen_width, this.progressBarHeight)
    }, c.showProgress = function (a) {
        for (var b = 0, c = this.progressCharacters.length, d = null; b < c && null == d;) {
            var e = this.progressCharacters[b];
            e._charVal == a && (d = e), b++
        }
        d && 1 != d.alpha && (d.alpha = 1, d.on("mousedown", this.showCharResults.bind(this))), this.updateCache()
    }, c.showCharResults = function (a) {
        abcya.GameGlobals.USER_TRACES.hasOwnProperty(a.currentTarget._charVal) && (this.uncache(), this.practicePopUp = new abcya.TracePracticePopUp(abcya.GameGlobals.USER_TRACES[a.currentTarget._charVal]), this.practicePopUp.x = a.currentTarget.x - this.practicePopUp.getBounds().width / 2, this.practicePopUp.x < 0 && (this.practicePopUp.x = 0), this.practicePopUp.x + this.practicePopUp.getBounds().width > game.screen_width && (this.practicePopUp.x = game.screen_width - this.practicePopUp.getBounds().width), this.practicePopUp.y = a.currentTarget.y - this.practicePopUp.getBounds().height, this.addChild(this.practicePopUp), game.stage.on("pressup", this.clearPracticeResults, this, !0))
    }, c.clearPracticeResults = function (a) {
        this.practicePopUp && this.removeChild(this.practicePopUp), this.cache(0, 0, game.screen_width, this.progressBarHeight)
    }, a.abcya.TraceProgressBar = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a) {
        this.Container_constructor(), this.initialize(a)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.tabs = null, c.selectBarWidth = null, c.curTab = null, c.initialize = function (a) {
        this.curTab = null, this.tabs = [];
        var b = "#fff";
        switch (abcya.GameGlobals.GAME_THEME) {
            case "rock":
                b = "#FFE471";
                break;
            case "classical":
                b = "#71FFFF";
                break;
            case "pop":
                b = "#FFFCEE";
                break;
            case "island":
                b = "#FFF87D"
        }
        for (; this.tabs.length < a.length;) {
            var c = 0 == this.tabs.length || this.tabs.length % 2 == 0 ? 1 : 2,
                d = abcya.GameGlobals.GAME_THEME + "-tab-" + c.toString(),
                e = new abcya.TraceSelectTab(d, a[this.tabs.length], b),
                f = 0 == this.tabs.length ? null : this.tabs[this.tabs.length - 1];
            e.x = f ? f.x + f.getBounds().width + 3.5 : 0, e.y = -25, this.addChild(e), e.on("mousedown", this.selectTab.bind(this)), this.tabs.push(e)
        }
        this.x = game.screen_width / 2 - this.getBounds().width / 2, this.cache(0, 0, game.screen_width, 2 * this.tabs[0].getBounds().height)
    }, c.selectTab = function (a) {
        if (a.currentTarget != this.curTab) {
            if (createjs.Sound.play("game-click"), this.curTab) {
                var b = this.curTab;
                this.moveTab(b, !1), this.curTab = null
            }
            this.curTab = a.currentTarget, this.moveTab(this.curTab, !0);
            var c = new createjs.Event("SELECT_TRACE_CHARACTER");
            c._charIndexSelected = this.tabs.indexOf(this.curTab), this.dispatchEvent(c)
        }
    }, c.showTab = function (a) {
        if (this.curTab) {
            var b = this.curTab;
            this.moveTab(b, !1), this.curTab = null
        }
        this.curTab = this.tabs[a], this.moveTab(this.curTab, !0)
    }, c.moveTab = function (a, b) {
        this.uncache();
        var c = b ? -5 : -25,
            d = b ? createjs.Ease.backOut : createjs.Ease.backIn;
        createjs.Tween.get(a).to({
            y: c
        }, 300, d), createjs.Tween.get(this).wait(300).call(this.updateSelectCache, [], this)
    }, c.updateSelectCache = function () {
        this.cache(0, 0, game.screen_width, 2 * this.tabs[0].getBounds().height)
    }, a.abcya.TraceSelectBar = createjs.promote(b, "Container")
}(window),
function (a) {
    function b(a, b, c) {
        this.Container_constructor(), this.initialize(a, b, c)
    }
    a.abcya = a.abcya || {};
    var c = b.prototype = createjs.extend(b, createjs.Container);
    c.charVal = null, c.initialize = function (a, b, c) {
        this.charVal = b;
        var d = new createjs.Sprite(game.assets.spriteSheet, a),
            e = new createjs.Text(b, "28pt printbold", c);
        e.x = d.getBounds().width / 2 - e.getMeasuredWidth() / 2, e.y = d.getBounds().height - e.getBounds().height - 12, this.addChild(d, e)
    }, a.abcya.TraceSelectTab = createjs.promote(b, "Container")
}(window);